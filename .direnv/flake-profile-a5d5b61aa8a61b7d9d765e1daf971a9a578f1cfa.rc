unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AR_FOR_TARGET='ar'
export AR_FOR_TARGET
AS='as'
export AS
AS_FOR_TARGET='as'
export AS_FOR_TARGET
BASH='/nix/store/7xmqfgfgipjypqprhz0xw6bd3jb58z3y-bash-5.2p26/bin/bash'
CC='clang'
export CC
CC_FOR_TARGET='clang'
export CC_FOR_TARGET
CONFIG_SHELL='/nix/store/7xmqfgfgipjypqprhz0xw6bd3jb58z3y-bash-5.2p26/bin/bash'
export CONFIG_SHELL
CXX='clang++'
export CXX
CXX_FOR_TARGET='clang++'
export CXX_FOR_TARGET
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/kd4rgfl2rgh7v0a1kb56m4a1k1j3scqv-rustc-wrapper-1.76.0/bin:/nix/store/c90izzhvpcw5xkn1zc13lp5cjjricb1k-cargo-1.76.0/bin:/nix/store/f6pldyr77vrj7lg3n952yl1fl5vfwggs-cargo-binutils-0.3.6/bin:/nix/store/iz7qg8gaajj33g89zxcf4jkgfqn57fs8-mdbook-0.4.37/bin:/nix/store/6byvyzs3l1dm1inhdk1ay0s376qk44cc-rust-analyzer-2024-03-25/bin:/nix/store/hank0k476yk9nkmf58m1pkb4hwwjwv9v-rustfmt-1.76.0/bin:/nix/store/jhgg13zgmvl2kfyqjh02jjv9d719457q-clippy-1.76.0/bin:/nix/store/lxxsxzpwx6pjq4xs6zxz3h4h35mgcra7-evcxr-0.17.0/bin:/nix/store/1sbkk95z0r5kblw75aq5xv12k7rg9q8b-tauri-1.6.1/bin:/nix/store/55x629m6x8f1xh1grgm1ddpwal2z6ain-trunk-0.18.8/bin:/nix/store/lwg7bgnagyksgd6ryjn3idc14yh04v7l-wasm-pack-0.12.1/bin:/nix/store/wn6ka9g6nzgd1wfmyy5jfb9m89b9mzzc-rustup-1.26.0/bin:/nix/store/04g48v2czgm7di8j7pal4xa91afwplzh-pkg-config-wrapper-0.29.2/bin:/nix/store/0sg2ixg4hnlxkfw73drvv4a2p2ysk5rp-openssl-3.0.13-bin/bin:/nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/bin:/nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6/bin:/nix/store/xngwhjywvndv7hmcijzvj4rkihv3iig4-cctools-binutils-darwin-wrapper-16.0.6-973.0.1/bin:/nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev/bin:/nix/store/q9iaj99l3hxs36ka9ph4r17nkgzx85qj-ncurses-6.4-dev/bin:/nix/store/34075x5g2mjwwzh413rd48qm751n0s7y-ncurses-6.4/bin:/nix/store/x0l7v0dj6kdm756q800z3bwrd0h9cmh3-llvm-16.0.6/bin:/nix/store/74j39fh21qhzb04l6xxnccwjsg7ykfhh-clang-16.0.6-dev/bin:/nix/store/qii4shz46sj38q2wdawiagshj4n1f0lr-clang-16.0.6/bin:/nix/store/x5gaa942zf952f2nwhjalyl4kxcp2z8a-llvm-binutils-wrapper-16.0.6/bin:/nix/store/4didmh01hn1vhzklhm03gams9754k7n2-lld-16.0.6/bin:/nix/store/n96qrar3fkhc28pnyli9dvrl45zaf9j2-coreutils-9.4/bin:/nix/store/rwvrdal864r5yml4zvdz1f0yih09yvjg-findutils-4.9.0/bin:/nix/store/4k7a9qg9k117q5k67z28bwzyr2bw1v7r-diffutils-3.10/bin:/nix/store/jwka3z87sxdczv18vjxiz38b83qwpvnm-gnused-4.9/bin:/nix/store/zr8q39dxh9y98a2wby5jq949gl8hqwz5-gnugrep-3.11/bin:/nix/store/f5yg83hcv86wkb0v4d6ld7j8b30z4n05-gawk-5.2.2/bin:/nix/store/iwd4wp1zxihri43q254g89gkad32pn07-gnutar-1.35/bin:/nix/store/kp9qgxkivwhrimcfhm81s18d7z1ff1bc-gzip-1.13/bin:/nix/store/ajyfylfj087w7klk3w34m3kx5xshhgxg-bzip2-1.0.8-bin/bin:/nix/store/224fzspjyx3mwc050v2bi9bikiq3h417-gnumake-4.4.1/bin:/nix/store/7xmqfgfgipjypqprhz0xw6bd3jb58z3y-bash-5.2p26/bin:/nix/store/ans0hknpa47k9cy9msakizabc8vvgzl8-patch-2.7.6/bin:/nix/store/lhnnabjd2n1a3qqslmy0fx2smx9jg6ax-xz-5.6.1-bin/bin:/nix/store/a1vzf9rkzqk28ym8nh3924ciixg6x0yb-file-5.45/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LD_DYLD_PATH='/usr/lib/dyld'
export LD_DYLD_PATH
LD_FOR_TARGET='ld'
export LD_FOR_TARGET
LINENO='76'
MACHTYPE='x86_64-apple-darwin22.6.0'
MACOSX_DEPLOYMENT_TARGET='10.12'
export MACOSX_DEPLOYMENT_TARGET
NIX_BINTOOLS='/nix/store/xngwhjywvndv7hmcijzvj4rkihv3iig4-cctools-binutils-darwin-wrapper-16.0.6-973.0.1'
export NIX_BINTOOLS
NIX_BINTOOLS_FOR_TARGET='/nix/store/x5gaa942zf952f2nwhjalyl4kxcp2z8a-llvm-binutils-wrapper-16.0.6'
export NIX_BINTOOLS_FOR_TARGET
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_apple_darwin='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_apple_darwin
NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_apple_darwin='1'
export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_apple_darwin
NIX_BUILD_CORES='16'
export NIX_BUILD_CORES
NIX_CC='/nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6'
export NIX_CC
NIX_CC_FOR_TARGET='/nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6'
export NIX_CC_FOR_TARGET
NIX_CC_WRAPPER_TARGET_HOST_x86_64_apple_darwin='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_apple_darwin
NIX_CC_WRAPPER_TARGET_TARGET_x86_64_apple_darwin='1'
export NIX_CC_WRAPPER_TARGET_TARGET_x86_64_apple_darwin
NIX_CFLAGS_COMPILE=' -frandom-seed=j4y78z0sjy -Wno-deprecated-declarations -F/System/Library/PrivateFrameworks -isystem /nix/store/viq2vm5f3j2dvg9s3i8pjy895ig8z96z-libcxx-16.0.6-dev/include -isystem /nix/store/crqys0h4qmipj3bqq7b7bdvbz29zn8rb-compiler-rt-libc-16.0.6-dev/include -iframework /nix/store/qhsgpzs9xsjrrmr2c2gbpgxl9lihkbnw-apple-framework-CoreServices/Library/Frameworks -iframework /nix/store/j9m3c20vw2sc3z706r34s94whxirwr76-apple-framework-CFNetwork/Library/Frameworks -iframework /nix/store/hc95skcs2rqf6jyw01j075pljg4i060j-apple-framework-CoreAudio/Library/Frameworks -iframework /nix/store/x54lc2llkvp2ak7s3kh0dq3yvlnid8as-apple-framework-IOKit/Library/Frameworks -iframework /nix/store/l66hcpw1cpwrbks2gln8fijq7glmb15z-apple-framework-CoreData/Library/Frameworks -iframework /nix/store/jvy4anwliaqn66yf8phdc2ai13977mwa-apple-framework-CoreFoundation/Library/Frameworks -iframework /nix/store/ii38vbr1rkkmyi0bpfma28n6kawm509z-apple-framework-DiskArbitration/Library/Frameworks -iframework /nix/store/p05ad4h6lpkm3g7gqfg11zjkr2b13grm-apple-framework-NetFS/Library/Frameworks -iframework /nix/store/zfmqzjnykhdxg5s2ryalixc2avj3l6k7-apple-framework-OpenDirectory/Library/Frameworks -iframework /nix/store/9l7ckyy8lrlgbcf7rf93iiikgxv6g3n9-apple-framework-Security/Library/Frameworks -iframework /nix/store/3cikf6yzkrfj1aar45s9q7mna9008y3i-apple-framework-ServiceManagement/Library/Frameworks -iframework /nix/store/9xwx2wr7rrvz52pjjcrnr17wfwz9rvcn-apple-framework-AppKit/Library/Frameworks -iframework /nix/store/zvhh5snnl073w6d58rh617kp41m3wp9v-apple-framework-ApplicationServices/Library/Frameworks -iframework /nix/store/2xsjlmhv7im39vzifa15z3skmw2d3f81-apple-framework-CoreGraphics/Library/Frameworks -iframework /nix/store/38kx73nm83m5xd5llqvwgmnf0i2z60zr-apple-framework-Accelerate/Library/Frameworks -iframework /nix/store/mji904fmdjvzf09j0xdiw4ps80y60ndf-apple-framework-CoreWLAN/Library/Frameworks -iframework /nix/store/9ysb6j9i85v7vdls2jcvg7fly3r39vz4-apple-framework-SecurityFoundation/Library/Frameworks -iframework /nix/store/q9yrxxnkn9ry0nvf48p5fih6wg34wcs3-apple-framework-IOBluetooth/Library/Frameworks -iframework /nix/store/qfz0c82zhf12x43jxcwhvfrg6f5d4sg1-apple-framework-CoreBluetooth/Library/Frameworks -iframework /nix/store/gs1c9qkz6b8al4aif7z8wgbl7hxvq1z0-apple-framework-IOSurface/Library/Frameworks -isystem /nix/store/6x6gg1dafmq2q1i82i1jxg6h3f9y672p-apple-lib-xpc/include -iframework /nix/store/5ih2g3461xn7n4dwjzfj4z9kp1va13gi-apple-framework-SystemConfiguration/Library/Frameworks -iframework /nix/store/jplkm2kw2ny8wayp7n7jd3hc3dqyi9xz-apple-framework-CoreText/Library/Frameworks -iframework /nix/store/b69ikp6xf9ljng8lvylia91rfpcwb22d-apple-framework-ImageIO/Library/Frameworks -iframework /nix/store/zkasvzzwfz98az81ydl35ihym7n8wx2d-apple-framework-AudioToolbox/Library/Frameworks -iframework /nix/store/mhwq0j7z9v3rpsr038q3gry9gkv15ikm-apple-framework-CoreMIDI/Library/Frameworks -iframework /nix/store/12s58bqdjbidqsanzfis84xja44fj3kd-apple-framework-AudioUnit/Library/Frameworks -iframework /nix/store/5chfhckz5bb39ziflp4yjdhcgyzn32xd-apple-framework-Carbon/Library/Frameworks -iframework /nix/store/f1aa4ab5ywndh9x0lx1afhjd8x5smfls-apple-framework-Foundation/Library/Frameworks -isystem /nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1/include -iframework /nix/store/9pfz7ij9lmwgmrd37ds6zfl6yg97im0w-apple-framework-QuartzCore/Library/Frameworks -iframework /nix/store/ka8a2i9bc1c4ra0gflirvm62hzb5wzys-apple-framework-CoreImage/Library/Frameworks -iframework /nix/store/9dq65y9alc0fzbv2iw6vka4p2y38mh6j-apple-framework-CoreVideo/Library/Frameworks -iframework /nix/store/pbn58l24izywbfhwb9i1q1w0ca40nb0n-apple-framework-OpenGL/Library/Frameworks -iframework /nix/store/vz55p8czh5zplpy8w7b4g6aj06df5ncz-apple-framework-Metal/Library/Frameworks -iframework /nix/store/ffmh07s811gn2bz5rkp725lzh3f8rm4f-apple-framework-OpenCL/Library/Frameworks -iframework /nix/store/bhdw2skc98wiflvpnm5qvbahmi3cqj42-apple-framework-UIFoundation/Library/Frameworks -iframework /nix/store/60xab4lrfa9qr7ip029f14vkibdmfcsn-apple-framework-WebKit/Library/Frameworks -iframework /nix/store/290r3989c7g1fq12amry7zymp83q4kbq-apple-framework-JavaScriptCore/Library/Frameworks -isystem /nix/store/702zw7mkrfs8zv1imcin5yfick1x9lkc-openssl-3.0.13-dev/include -isystem /nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/include -isystem /nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev/include -isystem /nix/store/q9iaj99l3hxs36ka9ph4r17nkgzx85qj-ncurses-6.4-dev/include -isystem /nix/store/6gshqxmqr22mv62j8v26gh5saidvqcv2-zlib-1.3.1-dev/include -isystem /nix/store/74j39fh21qhzb04l6xxnccwjsg7ykfhh-clang-16.0.6-dev/include -isystem /nix/store/wmzzrimz0wqrh4mhylkvrchw8zdiv7nl-lld-16.0.6-dev/include -iframework /nix/store/qhhfwlbwaz5ac0xqsvvg0fn61h6rkwql-apple-framework-CoreFoundation/Library/Frameworks -isystem /nix/store/viq2vm5f3j2dvg9s3i8pjy895ig8z96z-libcxx-16.0.6-dev/include -isystem /nix/store/crqys0h4qmipj3bqq7b7bdvbz29zn8rb-compiler-rt-libc-16.0.6-dev/include -iframework /nix/store/qhsgpzs9xsjrrmr2c2gbpgxl9lihkbnw-apple-framework-CoreServices/Library/Frameworks -iframework /nix/store/j9m3c20vw2sc3z706r34s94whxirwr76-apple-framework-CFNetwork/Library/Frameworks -iframework /nix/store/hc95skcs2rqf6jyw01j075pljg4i060j-apple-framework-CoreAudio/Library/Frameworks -iframework /nix/store/x54lc2llkvp2ak7s3kh0dq3yvlnid8as-apple-framework-IOKit/Library/Frameworks -iframework /nix/store/l66hcpw1cpwrbks2gln8fijq7glmb15z-apple-framework-CoreData/Library/Frameworks -iframework /nix/store/jvy4anwliaqn66yf8phdc2ai13977mwa-apple-framework-CoreFoundation/Library/Frameworks -iframework /nix/store/ii38vbr1rkkmyi0bpfma28n6kawm509z-apple-framework-DiskArbitration/Library/Frameworks -iframework /nix/store/p05ad4h6lpkm3g7gqfg11zjkr2b13grm-apple-framework-NetFS/Library/Frameworks -iframework /nix/store/zfmqzjnykhdxg5s2ryalixc2avj3l6k7-apple-framework-OpenDirectory/Library/Frameworks -iframework /nix/store/9l7ckyy8lrlgbcf7rf93iiikgxv6g3n9-apple-framework-Security/Library/Frameworks -iframework /nix/store/3cikf6yzkrfj1aar45s9q7mna9008y3i-apple-framework-ServiceManagement/Library/Frameworks -iframework /nix/store/9xwx2wr7rrvz52pjjcrnr17wfwz9rvcn-apple-framework-AppKit/Library/Frameworks -iframework /nix/store/zvhh5snnl073w6d58rh617kp41m3wp9v-apple-framework-ApplicationServices/Library/Frameworks -iframework /nix/store/2xsjlmhv7im39vzifa15z3skmw2d3f81-apple-framework-CoreGraphics/Library/Frameworks -iframework /nix/store/38kx73nm83m5xd5llqvwgmnf0i2z60zr-apple-framework-Accelerate/Library/Frameworks -iframework /nix/store/mji904fmdjvzf09j0xdiw4ps80y60ndf-apple-framework-CoreWLAN/Library/Frameworks -iframework /nix/store/9ysb6j9i85v7vdls2jcvg7fly3r39vz4-apple-framework-SecurityFoundation/Library/Frameworks -iframework /nix/store/q9yrxxnkn9ry0nvf48p5fih6wg34wcs3-apple-framework-IOBluetooth/Library/Frameworks -iframework /nix/store/qfz0c82zhf12x43jxcwhvfrg6f5d4sg1-apple-framework-CoreBluetooth/Library/Frameworks -iframework /nix/store/gs1c9qkz6b8al4aif7z8wgbl7hxvq1z0-apple-framework-IOSurface/Library/Frameworks -isystem /nix/store/6x6gg1dafmq2q1i82i1jxg6h3f9y672p-apple-lib-xpc/include -iframework /nix/store/5ih2g3461xn7n4dwjzfj4z9kp1va13gi-apple-framework-SystemConfiguration/Library/Frameworks -iframework /nix/store/jplkm2kw2ny8wayp7n7jd3hc3dqyi9xz-apple-framework-CoreText/Library/Frameworks -iframework /nix/store/b69ikp6xf9ljng8lvylia91rfpcwb22d-apple-framework-ImageIO/Library/Frameworks -iframework /nix/store/zkasvzzwfz98az81ydl35ihym7n8wx2d-apple-framework-AudioToolbox/Library/Frameworks -iframework /nix/store/mhwq0j7z9v3rpsr038q3gry9gkv15ikm-apple-framework-CoreMIDI/Library/Frameworks -iframework /nix/store/12s58bqdjbidqsanzfis84xja44fj3kd-apple-framework-AudioUnit/Library/Frameworks -iframework /nix/store/5chfhckz5bb39ziflp4yjdhcgyzn32xd-apple-framework-Carbon/Library/Frameworks -iframework /nix/store/f1aa4ab5ywndh9x0lx1afhjd8x5smfls-apple-framework-Foundation/Library/Frameworks -isystem /nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1/include -iframework /nix/store/9pfz7ij9lmwgmrd37ds6zfl6yg97im0w-apple-framework-QuartzCore/Library/Frameworks -iframework /nix/store/ka8a2i9bc1c4ra0gflirvm62hzb5wzys-apple-framework-CoreImage/Library/Frameworks -iframework /nix/store/9dq65y9alc0fzbv2iw6vka4p2y38mh6j-apple-framework-CoreVideo/Library/Frameworks -iframework /nix/store/pbn58l24izywbfhwb9i1q1w0ca40nb0n-apple-framework-OpenGL/Library/Frameworks -iframework /nix/store/vz55p8czh5zplpy8w7b4g6aj06df5ncz-apple-framework-Metal/Library/Frameworks -iframework /nix/store/ffmh07s811gn2bz5rkp725lzh3f8rm4f-apple-framework-OpenCL/Library/Frameworks -iframework /nix/store/bhdw2skc98wiflvpnm5qvbahmi3cqj42-apple-framework-UIFoundation/Library/Frameworks -iframework /nix/store/60xab4lrfa9qr7ip029f14vkibdmfcsn-apple-framework-WebKit/Library/Frameworks -iframework /nix/store/290r3989c7g1fq12amry7zymp83q4kbq-apple-framework-JavaScriptCore/Library/Frameworks -isystem /nix/store/702zw7mkrfs8zv1imcin5yfick1x9lkc-openssl-3.0.13-dev/include -isystem /nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/include -isystem /nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev/include -isystem /nix/store/q9iaj99l3hxs36ka9ph4r17nkgzx85qj-ncurses-6.4-dev/include -isystem /nix/store/6gshqxmqr22mv62j8v26gh5saidvqcv2-zlib-1.3.1-dev/include -isystem /nix/store/74j39fh21qhzb04l6xxnccwjsg7ykfhh-clang-16.0.6-dev/include -isystem /nix/store/wmzzrimz0wqrh4mhylkvrchw8zdiv7nl-lld-16.0.6-dev/include -iframework /nix/store/qhhfwlbwaz5ac0xqsvvg0fn61h6rkwql-apple-framework-CoreFoundation/Library/Frameworks'
export NIX_CFLAGS_COMPILE
NIX_CFLAGS_COMPILE_FOR_TARGET=' -isystem /nix/store/viq2vm5f3j2dvg9s3i8pjy895ig8z96z-libcxx-16.0.6-dev/include -isystem /nix/store/crqys0h4qmipj3bqq7b7bdvbz29zn8rb-compiler-rt-libc-16.0.6-dev/include -iframework /nix/store/qhsgpzs9xsjrrmr2c2gbpgxl9lihkbnw-apple-framework-CoreServices/Library/Frameworks -iframework /nix/store/j9m3c20vw2sc3z706r34s94whxirwr76-apple-framework-CFNetwork/Library/Frameworks -iframework /nix/store/hc95skcs2rqf6jyw01j075pljg4i060j-apple-framework-CoreAudio/Library/Frameworks -iframework /nix/store/x54lc2llkvp2ak7s3kh0dq3yvlnid8as-apple-framework-IOKit/Library/Frameworks -iframework /nix/store/l66hcpw1cpwrbks2gln8fijq7glmb15z-apple-framework-CoreData/Library/Frameworks -iframework /nix/store/jvy4anwliaqn66yf8phdc2ai13977mwa-apple-framework-CoreFoundation/Library/Frameworks -iframework /nix/store/ii38vbr1rkkmyi0bpfma28n6kawm509z-apple-framework-DiskArbitration/Library/Frameworks -iframework /nix/store/p05ad4h6lpkm3g7gqfg11zjkr2b13grm-apple-framework-NetFS/Library/Frameworks -iframework /nix/store/zfmqzjnykhdxg5s2ryalixc2avj3l6k7-apple-framework-OpenDirectory/Library/Frameworks -iframework /nix/store/9l7ckyy8lrlgbcf7rf93iiikgxv6g3n9-apple-framework-Security/Library/Frameworks -iframework /nix/store/3cikf6yzkrfj1aar45s9q7mna9008y3i-apple-framework-ServiceManagement/Library/Frameworks -iframework /nix/store/9xwx2wr7rrvz52pjjcrnr17wfwz9rvcn-apple-framework-AppKit/Library/Frameworks -iframework /nix/store/zvhh5snnl073w6d58rh617kp41m3wp9v-apple-framework-ApplicationServices/Library/Frameworks -iframework /nix/store/2xsjlmhv7im39vzifa15z3skmw2d3f81-apple-framework-CoreGraphics/Library/Frameworks -iframework /nix/store/38kx73nm83m5xd5llqvwgmnf0i2z60zr-apple-framework-Accelerate/Library/Frameworks -iframework /nix/store/mji904fmdjvzf09j0xdiw4ps80y60ndf-apple-framework-CoreWLAN/Library/Frameworks -iframework /nix/store/9ysb6j9i85v7vdls2jcvg7fly3r39vz4-apple-framework-SecurityFoundation/Library/Frameworks -iframework /nix/store/q9yrxxnkn9ry0nvf48p5fih6wg34wcs3-apple-framework-IOBluetooth/Library/Frameworks -iframework /nix/store/qfz0c82zhf12x43jxcwhvfrg6f5d4sg1-apple-framework-CoreBluetooth/Library/Frameworks -iframework /nix/store/gs1c9qkz6b8al4aif7z8wgbl7hxvq1z0-apple-framework-IOSurface/Library/Frameworks -isystem /nix/store/6x6gg1dafmq2q1i82i1jxg6h3f9y672p-apple-lib-xpc/include -iframework /nix/store/5ih2g3461xn7n4dwjzfj4z9kp1va13gi-apple-framework-SystemConfiguration/Library/Frameworks -iframework /nix/store/jplkm2kw2ny8wayp7n7jd3hc3dqyi9xz-apple-framework-CoreText/Library/Frameworks -iframework /nix/store/b69ikp6xf9ljng8lvylia91rfpcwb22d-apple-framework-ImageIO/Library/Frameworks -iframework /nix/store/zkasvzzwfz98az81ydl35ihym7n8wx2d-apple-framework-AudioToolbox/Library/Frameworks -iframework /nix/store/mhwq0j7z9v3rpsr038q3gry9gkv15ikm-apple-framework-CoreMIDI/Library/Frameworks -iframework /nix/store/12s58bqdjbidqsanzfis84xja44fj3kd-apple-framework-AudioUnit/Library/Frameworks -iframework /nix/store/5chfhckz5bb39ziflp4yjdhcgyzn32xd-apple-framework-Carbon/Library/Frameworks -iframework /nix/store/f1aa4ab5ywndh9x0lx1afhjd8x5smfls-apple-framework-Foundation/Library/Frameworks -isystem /nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1/include -iframework /nix/store/9pfz7ij9lmwgmrd37ds6zfl6yg97im0w-apple-framework-QuartzCore/Library/Frameworks -iframework /nix/store/ka8a2i9bc1c4ra0gflirvm62hzb5wzys-apple-framework-CoreImage/Library/Frameworks -iframework /nix/store/9dq65y9alc0fzbv2iw6vka4p2y38mh6j-apple-framework-CoreVideo/Library/Frameworks -iframework /nix/store/pbn58l24izywbfhwb9i1q1w0ca40nb0n-apple-framework-OpenGL/Library/Frameworks -iframework /nix/store/vz55p8czh5zplpy8w7b4g6aj06df5ncz-apple-framework-Metal/Library/Frameworks -iframework /nix/store/ffmh07s811gn2bz5rkp725lzh3f8rm4f-apple-framework-OpenCL/Library/Frameworks -iframework /nix/store/bhdw2skc98wiflvpnm5qvbahmi3cqj42-apple-framework-UIFoundation/Library/Frameworks -iframework /nix/store/60xab4lrfa9qr7ip029f14vkibdmfcsn-apple-framework-WebKit/Library/Frameworks -iframework /nix/store/290r3989c7g1fq12amry7zymp83q4kbq-apple-framework-JavaScriptCore/Library/Frameworks -isystem /nix/store/702zw7mkrfs8zv1imcin5yfick1x9lkc-openssl-3.0.13-dev/include -isystem /nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/include -isystem /nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev/include -isystem /nix/store/q9iaj99l3hxs36ka9ph4r17nkgzx85qj-ncurses-6.4-dev/include -isystem /nix/store/6gshqxmqr22mv62j8v26gh5saidvqcv2-zlib-1.3.1-dev/include -isystem /nix/store/74j39fh21qhzb04l6xxnccwjsg7ykfhh-clang-16.0.6-dev/include -isystem /nix/store/wmzzrimz0wqrh4mhylkvrchw8zdiv7nl-lld-16.0.6-dev/include -iframework /nix/store/qhhfwlbwaz5ac0xqsvvg0fn61h6rkwql-apple-framework-CoreFoundation/Library/Frameworks'
export NIX_CFLAGS_COMPILE_FOR_TARGET
NIX_COREFOUNDATION_RPATH='/System/Library/Frameworks'
export NIX_COREFOUNDATION_RPATH
NIX_DONT_SET_RPATH='1'
export NIX_DONT_SET_RPATH
NIX_DONT_SET_RPATH_FOR_BUILD='1'
export NIX_DONT_SET_RPATH_FOR_BUILD
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackprotector strictoverflow'
export NIX_HARDENING_ENABLE
NIX_IGNORE_LD_THROUGH_GCC='1'
export NIX_IGNORE_LD_THROUGH_GCC
NIX_LDFLAGS=' -liconv -L/nix/store/h1fj93a17dlpjm4dm9bxg46kjxhwmbgn-libcxx-16.0.6/lib -L/nix/store/7naprg1cjba3xq7a7kdfs3m45nwhxrrs-compiler-rt-libc-16.0.6/lib -L/nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1/lib -L/nix/store/z1yh2zj4z3cf1w1s17l7ig2dmfkqhcmk-openssl-3.0.13/lib -L/nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/lib -L/nix/store/34075x5g2mjwwzh413rd48qm751n0s7y-ncurses-6.4/lib -L/nix/store/mshw25dqlc3csddksf9q23d6j018gwys-zlib-1.3.1/lib -L/nix/store/vn7l3wd59f7ihi3c4kafazcp69v97n85-llvm-16.0.6-lib/lib -L/nix/store/cy8py0rq64fikvhaj1959svksl33dw9v-clang-16.0.6-lib/lib -L/nix/store/k31c5616jm19r45xl472fcc2hlc6wvsh-lld-16.0.6-lib/lib -L/nix/store/h1fj93a17dlpjm4dm9bxg46kjxhwmbgn-libcxx-16.0.6/lib -L/nix/store/7naprg1cjba3xq7a7kdfs3m45nwhxrrs-compiler-rt-libc-16.0.6/lib -L/nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1/lib -L/nix/store/z1yh2zj4z3cf1w1s17l7ig2dmfkqhcmk-openssl-3.0.13/lib -L/nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/lib -L/nix/store/34075x5g2mjwwzh413rd48qm751n0s7y-ncurses-6.4/lib -L/nix/store/mshw25dqlc3csddksf9q23d6j018gwys-zlib-1.3.1/lib -L/nix/store/vn7l3wd59f7ihi3c4kafazcp69v97n85-llvm-16.0.6-lib/lib -L/nix/store/cy8py0rq64fikvhaj1959svksl33dw9v-clang-16.0.6-lib/lib -L/nix/store/k31c5616jm19r45xl472fcc2hlc6wvsh-lld-16.0.6-lib/lib'
export NIX_LDFLAGS
NIX_LDFLAGS_FOR_TARGET=' -L/nix/store/h1fj93a17dlpjm4dm9bxg46kjxhwmbgn-libcxx-16.0.6/lib -L/nix/store/h1fj93a17dlpjm4dm9bxg46kjxhwmbgn-libcxx-16.0.6/lib -L/nix/store/7naprg1cjba3xq7a7kdfs3m45nwhxrrs-compiler-rt-libc-16.0.6/lib -L/nix/store/7naprg1cjba3xq7a7kdfs3m45nwhxrrs-compiler-rt-libc-16.0.6/lib -L/nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1/lib -L/nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1/lib -L/nix/store/z1yh2zj4z3cf1w1s17l7ig2dmfkqhcmk-openssl-3.0.13/lib -L/nix/store/z1yh2zj4z3cf1w1s17l7ig2dmfkqhcmk-openssl-3.0.13/lib -L/nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/lib -L/nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/lib -L/nix/store/34075x5g2mjwwzh413rd48qm751n0s7y-ncurses-6.4/lib -L/nix/store/34075x5g2mjwwzh413rd48qm751n0s7y-ncurses-6.4/lib -L/nix/store/mshw25dqlc3csddksf9q23d6j018gwys-zlib-1.3.1/lib -L/nix/store/mshw25dqlc3csddksf9q23d6j018gwys-zlib-1.3.1/lib -L/nix/store/vn7l3wd59f7ihi3c4kafazcp69v97n85-llvm-16.0.6-lib/lib -L/nix/store/vn7l3wd59f7ihi3c4kafazcp69v97n85-llvm-16.0.6-lib/lib -L/nix/store/cy8py0rq64fikvhaj1959svksl33dw9v-clang-16.0.6-lib/lib -L/nix/store/cy8py0rq64fikvhaj1959svksl33dw9v-clang-16.0.6-lib/lib -L/nix/store/k31c5616jm19r45xl472fcc2hlc6wvsh-lld-16.0.6-lib/lib -L/nix/store/k31c5616jm19r45xl472fcc2hlc6wvsh-lld-16.0.6-lib/lib'
export NIX_LDFLAGS_FOR_TARGET
NIX_NO_SELF_RPATH='1'
export NIX_NO_SELF_RPATH
NIX_PKG_CONFIG_WRAPPER_TARGET_TARGET_x86_64_apple_darwin='1'
export NIX_PKG_CONFIG_WRAPPER_TARGET_TARGET_x86_64_apple_darwin
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
NM_FOR_TARGET='nm'
export NM_FOR_TARGET
OBJCOPY_FOR_TARGET='objcopy'
export OBJCOPY_FOR_TARGET
OBJDUMP_FOR_TARGET='objdump'
export OBJDUMP_FOR_TARGET
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='darwin22.6.0'
PATH='/nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6/bin:/nix/store/qii4shz46sj38q2wdawiagshj4n1f0lr-clang-16.0.6/bin:/nix/store/n96qrar3fkhc28pnyli9dvrl45zaf9j2-coreutils-9.4/bin:/nix/store/xngwhjywvndv7hmcijzvj4rkihv3iig4-cctools-binutils-darwin-wrapper-16.0.6-973.0.1/bin:/nix/store/05dpcrm5bcw9ix3y1npxyzma2m24gamx-cctools-binutils-darwin-16.0.6-973.0.1/bin:/nix/store/kd4rgfl2rgh7v0a1kb56m4a1k1j3scqv-rustc-wrapper-1.76.0/bin:/nix/store/c90izzhvpcw5xkn1zc13lp5cjjricb1k-cargo-1.76.0/bin:/nix/store/f6pldyr77vrj7lg3n952yl1fl5vfwggs-cargo-binutils-0.3.6/bin:/nix/store/iz7qg8gaajj33g89zxcf4jkgfqn57fs8-mdbook-0.4.37/bin:/nix/store/6byvyzs3l1dm1inhdk1ay0s376qk44cc-rust-analyzer-2024-03-25/bin:/nix/store/hank0k476yk9nkmf58m1pkb4hwwjwv9v-rustfmt-1.76.0/bin:/nix/store/jhgg13zgmvl2kfyqjh02jjv9d719457q-clippy-1.76.0/bin:/nix/store/lxxsxzpwx6pjq4xs6zxz3h4h35mgcra7-evcxr-0.17.0/bin:/nix/store/1sbkk95z0r5kblw75aq5xv12k7rg9q8b-tauri-1.6.1/bin:/nix/store/55x629m6x8f1xh1grgm1ddpwal2z6ain-trunk-0.18.8/bin:/nix/store/lwg7bgnagyksgd6ryjn3idc14yh04v7l-wasm-pack-0.12.1/bin:/nix/store/wn6ka9g6nzgd1wfmyy5jfb9m89b9mzzc-rustup-1.26.0/bin:/nix/store/04g48v2czgm7di8j7pal4xa91afwplzh-pkg-config-wrapper-0.29.2/bin:/nix/store/0sg2ixg4hnlxkfw73drvv4a2p2ysk5rp-openssl-3.0.13-bin/bin:/nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50/bin:/nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev/bin:/nix/store/q9iaj99l3hxs36ka9ph4r17nkgzx85qj-ncurses-6.4-dev/bin:/nix/store/34075x5g2mjwwzh413rd48qm751n0s7y-ncurses-6.4/bin:/nix/store/x0l7v0dj6kdm756q800z3bwrd0h9cmh3-llvm-16.0.6/bin:/nix/store/74j39fh21qhzb04l6xxnccwjsg7ykfhh-clang-16.0.6-dev/bin:/nix/store/x5gaa942zf952f2nwhjalyl4kxcp2z8a-llvm-binutils-wrapper-16.0.6/bin:/nix/store/91rkap4m2vixkyfmi5273zhnz364x2dj-llvm-binutils-16.0.6/bin:/nix/store/4didmh01hn1vhzklhm03gams9754k7n2-lld-16.0.6/bin:/nix/store/n96qrar3fkhc28pnyli9dvrl45zaf9j2-coreutils-9.4/bin:/nix/store/rwvrdal864r5yml4zvdz1f0yih09yvjg-findutils-4.9.0/bin:/nix/store/4k7a9qg9k117q5k67z28bwzyr2bw1v7r-diffutils-3.10/bin:/nix/store/jwka3z87sxdczv18vjxiz38b83qwpvnm-gnused-4.9/bin:/nix/store/zr8q39dxh9y98a2wby5jq949gl8hqwz5-gnugrep-3.11/bin:/nix/store/f5yg83hcv86wkb0v4d6ld7j8b30z4n05-gawk-5.2.2/bin:/nix/store/iwd4wp1zxihri43q254g89gkad32pn07-gnutar-1.35/bin:/nix/store/kp9qgxkivwhrimcfhm81s18d7z1ff1bc-gzip-1.13/bin:/nix/store/ajyfylfj087w7klk3w34m3kx5xshhgxg-bzip2-1.0.8-bin/bin:/nix/store/224fzspjyx3mwc050v2bi9bikiq3h417-gnumake-4.4.1/bin:/nix/store/7xmqfgfgipjypqprhz0xw6bd3jb58z3y-bash-5.2p26/bin:/nix/store/ans0hknpa47k9cy9msakizabc8vvgzl8-patch-2.7.6/bin:/nix/store/lhnnabjd2n1a3qqslmy0fx2smx9jg6ax-xz-5.6.1-bin/bin:/nix/store/a1vzf9rkzqk28ym8nh3924ciixg6x0yb-file-5.45/bin'
export PATH
PATH_LOCALE='/nix/store/5whizpwqmdmb94qysds6vx6x5wfbqm51-adv_cmds-119-locale/share/locale'
export PATH_LOCALE
PKG_CONFIG_FOR_TARGET='pkg-config'
export PKG_CONFIG_FOR_TARGET
PKG_CONFIG_PATH_FOR_TARGET='/nix/store/702zw7mkrfs8zv1imcin5yfick1x9lkc-openssl-3.0.13-dev/lib/pkgconfig:/nix/store/q9iaj99l3hxs36ka9ph4r17nkgzx85qj-ncurses-6.4-dev/lib/pkgconfig:/nix/store/6gshqxmqr22mv62j8v26gh5saidvqcv2-zlib-1.3.1-dev/lib/pkgconfig'
export PKG_CONFIG_PATH_FOR_TARGET
PS4='+ '
RANLIB='ranlib'
export RANLIB
RANLIB_FOR_TARGET='ranlib'
export RANLIB_FOR_TARGET
READELF_FOR_TARGET='readelf'
export READELF_FOR_TARGET
RUST_SRC_PATH='/nix/store/31jv3sdwplc31py69k2v1ka4qgb0dbcl-rust-lib-src'
export RUST_SRC_PATH
SIZE='size'
export SIZE
SIZE_FOR_TARGET='size'
export SIZE_FOR_TARGET
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRINGS_FOR_TARGET='strings'
export STRINGS_FOR_TARGET
STRIP='strip'
export STRIP
STRIP_FOR_TARGET='strip'
export STRIP_FOR_TARGET
WINDRES_FOR_TARGET='windres'
export WINDRES_FOR_TARGET
XDG_DATA_DIRS=''
export XDG_DATA_DIRS
ZERO_AR_DATE='1'
export ZERO_AR_DATE
__darwinAllowLocalNetworking=''
export __darwinAllowLocalNetworking
__impureHostDeps='/System/Library/Frameworks/CoreFoundation.framework /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation /bin/sh /usr/lib/libSystem.B.dylib /usr/lib/system/libunc.dylib /dev/zero /dev/random /dev/urandom /bin/sh'
export __impureHostDeps
__propagatedImpureHostDeps=''
export __propagatedImpureHostDeps
__propagatedSandboxProfile=''
export __propagatedSandboxProfile
__sandboxProfile=''
export __sandboxProfile
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs='/nix/store/kd4rgfl2rgh7v0a1kb56m4a1k1j3scqv-rustc-wrapper-1.76.0 /nix/store/c90izzhvpcw5xkn1zc13lp5cjjricb1k-cargo-1.76.0 /nix/store/f6pldyr77vrj7lg3n952yl1fl5vfwggs-cargo-binutils-0.3.6 /nix/store/iz7qg8gaajj33g89zxcf4jkgfqn57fs8-mdbook-0.4.37 /nix/store/6byvyzs3l1dm1inhdk1ay0s376qk44cc-rust-analyzer-2024-03-25 /nix/store/hank0k476yk9nkmf58m1pkb4hwwjwv9v-rustfmt-1.76.0 /nix/store/jhgg13zgmvl2kfyqjh02jjv9d719457q-clippy-1.76.0 /nix/store/lxxsxzpwx6pjq4xs6zxz3h4h35mgcra7-evcxr-0.17.0 /nix/store/1sbkk95z0r5kblw75aq5xv12k7rg9q8b-tauri-1.6.1 /nix/store/55x629m6x8f1xh1grgm1ddpwal2z6ain-trunk-0.18.8 /nix/store/lwg7bgnagyksgd6ryjn3idc14yh04v7l-wasm-pack-0.12.1 /nix/store/wn6ka9g6nzgd1wfmyy5jfb9m89b9mzzc-rustup-1.26.0 /nix/store/qhsgpzs9xsjrrmr2c2gbpgxl9lihkbnw-apple-framework-CoreServices /nix/store/9xwx2wr7rrvz52pjjcrnr17wfwz9rvcn-apple-framework-AppKit /nix/store/60xab4lrfa9qr7ip029f14vkibdmfcsn-apple-framework-WebKit /nix/store/9l7ckyy8lrlgbcf7rf93iiikgxv6g3n9-apple-framework-Security /nix/store/04g48v2czgm7di8j7pal4xa91afwplzh-pkg-config-wrapper-0.29.2 /nix/store/702zw7mkrfs8zv1imcin5yfick1x9lkc-openssl-3.0.13-dev /nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50 /nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6 /nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev /nix/store/74j39fh21qhzb04l6xxnccwjsg7ykfhh-clang-16.0.6-dev /nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev /nix/store/x5gaa942zf952f2nwhjalyl4kxcp2z8a-llvm-binutils-wrapper-16.0.6 /nix/store/wmzzrimz0wqrh4mhylkvrchw8zdiv7nl-lld-16.0.6-dev'
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/7xmqfgfgipjypqprhz0xw6bd3jb58z3y-bash-5.2p26/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs='/nix/store/qhhfwlbwaz5ac0xqsvvg0fn61h6rkwql-apple-framework-CoreFoundation'
defaultNativeBuildInputs='/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/ilaf1w22bxi6jsi45alhmvvdgy4ly3zs-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh /nix/store/wmknncrif06fqxa16hpdldhixk95nds0-strip.sh /nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'noDeprecatedDeclarations' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'addPrivateFrameworks' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'noDeprecatedDeclarations' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'addPrivateFrameworks' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' 'useSystemCoreFoundationFramework' )
declare -a envTargetTargetHooks=('pkgConfigWrapper_addPkgConfigPath' 'ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' 'bintoolsWrapper_addLDVars' )
declare -a fixupOutputHooks=('if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' 'fixDarwinFrameworksIn $prefix' )
flag='-F/System/Library/PrivateFrameworks'
guess='16'
initialPath='/nix/store/n96qrar3fkhc28pnyli9dvrl45zaf9j2-coreutils-9.4 /nix/store/rwvrdal864r5yml4zvdz1f0yih09yvjg-findutils-4.9.0 /nix/store/4k7a9qg9k117q5k67z28bwzyr2bw1v7r-diffutils-3.10 /nix/store/jwka3z87sxdczv18vjxiz38b83qwpvnm-gnused-4.9 /nix/store/zr8q39dxh9y98a2wby5jq949gl8hqwz5-gnugrep-3.11 /nix/store/f5yg83hcv86wkb0v4d6ld7j8b30z4n05-gawk-5.2.2 /nix/store/iwd4wp1zxihri43q254g89gkad32pn07-gnutar-1.35 /nix/store/kp9qgxkivwhrimcfhm81s18d7z1ff1bc-gzip-1.13 /nix/store/ajyfylfj087w7klk3w34m3kx5xshhgxg-bzip2-1.0.8-bin /nix/store/224fzspjyx3mwc050v2bi9bikiq3h417-gnumake-4.4.1 /nix/store/7xmqfgfgipjypqprhz0xw6bd3jb58z3y-bash-5.2p26 /nix/store/ans0hknpa47k9cy9msakizabc8vvgzl8-patch-2.7.6 /nix/store/lhnnabjd2n1a3qqslmy0fx2smx9jg6ax-xz-5.6.1-bin /nix/store/a1vzf9rkzqk28ym8nh3924ciixg6x0yb-file-5.45'
mesonFlags=''
export mesonFlags
name='nix-shell-env'
export name
nativeBuildInputs=''
export nativeBuildInputs
out='/Users/dominikb1888/Projects/clack/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/qhhfwlbwaz5ac0xqsvvg0fn61h6rkwql-apple-framework-CoreFoundation'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/ilaf1w22bxi6jsi45alhmvvdgy4ly3zs-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh' '/nix/store/wmknncrif06fqxa16hpdldhixk95nds0-strip.sh' '/nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6' '/nix/store/xngwhjywvndv7hmcijzvj4rkihv3iig4-cctools-binutils-darwin-wrapper-16.0.6-973.0.1' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/viq2vm5f3j2dvg9s3i8pjy895ig8z96z-libcxx-16.0.6-dev' '/nix/store/h1fj93a17dlpjm4dm9bxg46kjxhwmbgn-libcxx-16.0.6' '/nix/store/crqys0h4qmipj3bqq7b7bdvbz29zn8rb-compiler-rt-libc-16.0.6-dev' '/nix/store/7naprg1cjba3xq7a7kdfs3m45nwhxrrs-compiler-rt-libc-16.0.6' )
declare -a pkgsHostTarget=('/nix/store/kd4rgfl2rgh7v0a1kb56m4a1k1j3scqv-rustc-wrapper-1.76.0' '/nix/store/c90izzhvpcw5xkn1zc13lp5cjjricb1k-cargo-1.76.0' '/nix/store/f6pldyr77vrj7lg3n952yl1fl5vfwggs-cargo-binutils-0.3.6' '/nix/store/iz7qg8gaajj33g89zxcf4jkgfqn57fs8-mdbook-0.4.37' '/nix/store/6byvyzs3l1dm1inhdk1ay0s376qk44cc-rust-analyzer-2024-03-25' '/nix/store/hank0k476yk9nkmf58m1pkb4hwwjwv9v-rustfmt-1.76.0' '/nix/store/jhgg13zgmvl2kfyqjh02jjv9d719457q-clippy-1.76.0' '/nix/store/lxxsxzpwx6pjq4xs6zxz3h4h35mgcra7-evcxr-0.17.0' '/nix/store/1sbkk95z0r5kblw75aq5xv12k7rg9q8b-tauri-1.6.1' '/nix/store/55x629m6x8f1xh1grgm1ddpwal2z6ain-trunk-0.18.8' '/nix/store/lwg7bgnagyksgd6ryjn3idc14yh04v7l-wasm-pack-0.12.1' '/nix/store/wn6ka9g6nzgd1wfmyy5jfb9m89b9mzzc-rustup-1.26.0' '/nix/store/qhsgpzs9xsjrrmr2c2gbpgxl9lihkbnw-apple-framework-CoreServices' '/nix/store/j9m3c20vw2sc3z706r34s94whxirwr76-apple-framework-CFNetwork' '/nix/store/hc95skcs2rqf6jyw01j075pljg4i060j-apple-framework-CoreAudio' '/nix/store/x54lc2llkvp2ak7s3kh0dq3yvlnid8as-apple-framework-IOKit' '/nix/store/l66hcpw1cpwrbks2gln8fijq7glmb15z-apple-framework-CoreData' '/nix/store/jvy4anwliaqn66yf8phdc2ai13977mwa-apple-framework-CoreFoundation' '/nix/store/ii38vbr1rkkmyi0bpfma28n6kawm509z-apple-framework-DiskArbitration' '/nix/store/p05ad4h6lpkm3g7gqfg11zjkr2b13grm-apple-framework-NetFS' '/nix/store/zfmqzjnykhdxg5s2ryalixc2avj3l6k7-apple-framework-OpenDirectory' '/nix/store/9l7ckyy8lrlgbcf7rf93iiikgxv6g3n9-apple-framework-Security' '/nix/store/3cikf6yzkrfj1aar45s9q7mna9008y3i-apple-framework-ServiceManagement' '/nix/store/9xwx2wr7rrvz52pjjcrnr17wfwz9rvcn-apple-framework-AppKit' '/nix/store/zvhh5snnl073w6d58rh617kp41m3wp9v-apple-framework-ApplicationServices' '/nix/store/2xsjlmhv7im39vzifa15z3skmw2d3f81-apple-framework-CoreGraphics' '/nix/store/38kx73nm83m5xd5llqvwgmnf0i2z60zr-apple-framework-Accelerate' '/nix/store/mji904fmdjvzf09j0xdiw4ps80y60ndf-apple-framework-CoreWLAN' '/nix/store/9ysb6j9i85v7vdls2jcvg7fly3r39vz4-apple-framework-SecurityFoundation' '/nix/store/q9yrxxnkn9ry0nvf48p5fih6wg34wcs3-apple-framework-IOBluetooth' '/nix/store/qfz0c82zhf12x43jxcwhvfrg6f5d4sg1-apple-framework-CoreBluetooth' '/nix/store/gs1c9qkz6b8al4aif7z8wgbl7hxvq1z0-apple-framework-IOSurface' '/nix/store/6x6gg1dafmq2q1i82i1jxg6h3f9y672p-apple-lib-xpc' '/nix/store/5ih2g3461xn7n4dwjzfj4z9kp1va13gi-apple-framework-SystemConfiguration' '/nix/store/jplkm2kw2ny8wayp7n7jd3hc3dqyi9xz-apple-framework-CoreText' '/nix/store/b69ikp6xf9ljng8lvylia91rfpcwb22d-apple-framework-ImageIO' '/nix/store/zkasvzzwfz98az81ydl35ihym7n8wx2d-apple-framework-AudioToolbox' '/nix/store/mhwq0j7z9v3rpsr038q3gry9gkv15ikm-apple-framework-CoreMIDI' '/nix/store/12s58bqdjbidqsanzfis84xja44fj3kd-apple-framework-AudioUnit' '/nix/store/5chfhckz5bb39ziflp4yjdhcgyzn32xd-apple-framework-Carbon' '/nix/store/f1aa4ab5ywndh9x0lx1afhjd8x5smfls-apple-framework-Foundation' '/nix/store/gyk6bgdhz4z9xj285y0sa5sv2s96649k-objc4-709.1' '/nix/store/9pfz7ij9lmwgmrd37ds6zfl6yg97im0w-apple-framework-QuartzCore' '/nix/store/ka8a2i9bc1c4ra0gflirvm62hzb5wzys-apple-framework-CoreImage' '/nix/store/9dq65y9alc0fzbv2iw6vka4p2y38mh6j-apple-framework-CoreVideo' '/nix/store/pbn58l24izywbfhwb9i1q1w0ca40nb0n-apple-framework-OpenGL' '/nix/store/vz55p8czh5zplpy8w7b4g6aj06df5ncz-apple-framework-Metal' '/nix/store/ffmh07s811gn2bz5rkp725lzh3f8rm4f-apple-framework-OpenCL' '/nix/store/bhdw2skc98wiflvpnm5qvbahmi3cqj42-apple-framework-UIFoundation' '/nix/store/60xab4lrfa9qr7ip029f14vkibdmfcsn-apple-framework-WebKit' '/nix/store/290r3989c7g1fq12amry7zymp83q4kbq-apple-framework-JavaScriptCore' '/nix/store/04g48v2czgm7di8j7pal4xa91afwplzh-pkg-config-wrapper-0.29.2' '/nix/store/702zw7mkrfs8zv1imcin5yfick1x9lkc-openssl-3.0.13-dev' '/nix/store/0sg2ixg4hnlxkfw73drvv4a2p2ysk5rp-openssl-3.0.13-bin' '/nix/store/z1yh2zj4z3cf1w1s17l7ig2dmfkqhcmk-openssl-3.0.13' '/nix/store/y8ygbc6gfjrganxv79xf9wh7sxd5glld-libiconv-50' '/nix/store/yjzqlbr324ijwya7wgja90f6apjcfq77-clang-wrapper-16.0.6' '/nix/store/xngwhjywvndv7hmcijzvj4rkihv3iig4-cctools-binutils-darwin-wrapper-16.0.6-973.0.1' '/nix/store/9w4jmg6w9gm5hsz03h6m8wsypvc70yhd-llvm-16.0.6-dev' '/nix/store/q9iaj99l3hxs36ka9ph4r17nkgzx85qj-ncurses-6.4-dev' '/nix/store/34075x5g2mjwwzh413rd48qm751n0s7y-ncurses-6.4' '/nix/store/6gshqxmqr22mv62j8v26gh5saidvqcv2-zlib-1.3.1-dev' '/nix/store/mshw25dqlc3csddksf9q23d6j018gwys-zlib-1.3.1' '/nix/store/vn7l3wd59f7ihi3c4kafazcp69v97n85-llvm-16.0.6-lib' '/nix/store/x0l7v0dj6kdm756q800z3bwrd0h9cmh3-llvm-16.0.6' '/nix/store/74j39fh21qhzb04l6xxnccwjsg7ykfhh-clang-16.0.6-dev' '/nix/store/cy8py0rq64fikvhaj1959svksl33dw9v-clang-16.0.6-lib' '/nix/store/qii4shz46sj38q2wdawiagshj4n1f0lr-clang-16.0.6' '/nix/store/x5gaa942zf952f2nwhjalyl4kxcp2z8a-llvm-binutils-wrapper-16.0.6' '/nix/store/wmzzrimz0wqrh4mhylkvrchw8zdiv7nl-lld-16.0.6-dev' '/nix/store/k31c5616jm19r45xl472fcc2hlc6wvsh-lld-16.0.6-lib' '/nix/store/4didmh01hn1vhzklhm03gams9754k7n2-lld-16.0.6' '/nix/store/qhhfwlbwaz5ac0xqsvvg0fn61h6rkwql-apple-framework-CoreFoundation' )
declare -a pkgsTargetTarget=('/nix/store/viq2vm5f3j2dvg9s3i8pjy895ig8z96z-libcxx-16.0.6-dev' '/nix/store/h1fj93a17dlpjm4dm9bxg46kjxhwmbgn-libcxx-16.0.6' '/nix/store/crqys0h4qmipj3bqq7b7bdvbz29zn8rb-compiler-rt-libc-16.0.6-dev' '/nix/store/7naprg1cjba3xq7a7kdfs3m45nwhxrrs-compiler-rt-libc-16.0.6' )
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' 'linkSystemCoreFoundationFramework' )
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preferLocalBuild='1'
export preferLocalBuild
prefix='/Users/dominikb1888/Projects/clack/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/7xmqfgfgipjypqprhz0xw6bd3jb58z3y-bash-5.2p26/bin/bash'
export shell
shellHook=''
export shellHook
stdenv='/nix/store/c9bk0v8vlqvf6n126rvnq22r906zy33h-stdenv-darwin'
export stdenv
strictDeps=''
export strictDeps
stripDebugFlags='-S'
system='x86_64-darwin'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_accumFlagsArray ()
{
 
    local name;
    if [ -n "$__structuredAttrs" ]; then
        for name in "$@";
        do
            local -n nameref="$name";
            flagsArray+=(${nameref+"${nameref[@]}"});
        done;
    else
        for name in "$@";
        do
            local -n nameref="$name";
            case "$name" in 
                *Array)
                    flagsArray+=(${nameref+"${nameref[@]}"})
                ;;
                *)
                    flagsArray+=(${nameref-})
                ;;
            esac;
        done;
    fi
}
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    for varName in $(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }');
    do
        if (( "${NIX_DEBUG:-0}" >= 1 )); then
            printf "@%s@ -> %q\n" "${varName}" "${!varName}" 1>&2;
        fi;
        args+=("--subst-var" "$varName");
    done
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addPrivateFrameworks ()
{
 
    flag="-F/System/Library/PrivateFrameworks";
    if [[ "${NIX_CFLAGS_COMPILE-}" != *$flag* ]]; then
        NIX_CFLAGS_COMPILE+=" $flag";
    fi
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget=check;
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget=test;
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray+=("${checkFlags[@]:-VERBOSE=y}");
        else
            flagsArray+=(${checkFlags:-VERBOSE=y});
        fi;
        _accumFlagsArray checkFlagsArray;
        flagsArray+=(${checkTarget});
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        _accumFlagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    _accumFlagsArray distFlags distFlagsArray;
    flagsArray+=(${distTarget:-dist});
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars" || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixDarwinFrameworks ()
{
 
    local systemPrefix='/System/Library/Frameworks';
    for fn in "$@";
    do
        if [ -L "$fn" ]; then
            continue;
        fi;
        echo "$fn: fixing dylib";
        for framework in $(otool -L "$fn" | awk '/CoreFoundation\.framework/ {print $1}');
        do
            install_name_tool -change "$framework" "$systemPrefix/CoreFoundation.framework/Versions/A/CoreFoundation" "$fn" 1>&2;
        done;
    done
}
fixDarwinFrameworksIn ()
{
 
    local dir="$1";
    fixDarwinFrameworks $(find "$dir" -name "*.dylib")
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "llvm-binutils-wrapper-16.0.6: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_apple_darwin=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_apple_darwin=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_apple_darwin=1
        ;;
        *)
            echo "llvm-binutils-wrapper-16.0.6: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
            _accumFlagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray;
            flagsArray+=(${installCheckTarget:-installcheck});
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
    _accumFlagsArray makeFlags makeFlagsArray installFlags installFlagsArray;
    if [ -n "$__structuredAttrs" ]; then
        flagsArray+=("${installTargets[@]:-install}");
    else
        flagsArray+=(${installTargets:-install});
    fi;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
linkSystemCoreFoundationFramework ()
{
 
    NIX_CFLAGS_COMPILE="-F/nix/store/jvy4anwliaqn66yf8phdc2ai13977mwa-apple-framework-CoreFoundation/Library/Frameworks${NIX_CFLAGS_COMPILE:+ }${NIX_CFLAGS_COMPILE-}";
    NIX_LDFLAGS+=" /nix/store/jvy4anwliaqn66yf8phdc2ai13977mwa-apple-framework-CoreFoundation/Library/Frameworks/CoreFoundation.framework/CoreFoundation.tbd"
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
noDeprecatedDeclarations ()
{
 
    flag="-Wno-deprecated-declarations";
    if [[ "${NIX_CFLAGS_COMPILE-}" != *$flag* ]]; then
        NIX_CFLAGS_COMPILE+=" $flag";
    fi
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    if [ -n "$__structuredAttrs" ]; then
        patchesArray=(${patches:+"${patches[@]}"});
    else
        patchesArray=(${patches:-});
    fi;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray=("${patchFlags[@]:--p1}");
        else
            flagsArray=(${patchFlags:--p1});
        fi;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" command -v "env" || true)";
                args="-S $(PATH="${!pathName}" command -v "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" command -v "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" command -v "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
pkgConfigWrapper_addPkgConfigPath ()
{
 
    local role_post;
    getHostRoleEnvHook;
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/lib/pkgconfig";
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/share/pkgconfig"
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    if [[ -n $NIX_LOG_FD ]]; then
        echo "@nix { \"action\": \"setPhase\", \"phase\": \"$curPhase\" }" >&"$NIX_LOG_FD";
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    local endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x "${sourceRoot}";
        cd "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -print0 | xargs -r -0 -n1 -- realpath -z | sort -u -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream(): WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        if [ "$replace_mode" == --replace-warn ]; then
                            printf "substituteStream(): WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                        else
                            if [ "$replace_mode" == --replace-fail ]; then
                                printf "substituteStream(): ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                                return 1;
                            fi;
                        fi;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream(): ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream(): ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream(): ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    if [ -n "$__structuredAttrs" ]; then
        srcsArray=("${srcs[@]}");
    else
        srcsArray=($srcs);
    fi;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
useSystemCoreFoundationFramework ()
{
 
    export NIX_COREFOUNDATION_RPATH=/System/Library/Frameworks
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
